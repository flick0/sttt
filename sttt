#!/usr/bin/env python3

# a solution to your terminal transition tribulations

import curses
import argparse
from curses import wrapper

from dataclasses import dataclass
import time
import inspect

############################################################################################################
# Cubic Bezier Easing directly translated from https://github.com/gre/bezier-easing/blob/master/src/index.js
############################################################################################################

NEWTON_ITERATIONS = 4
NEWTON_MIN_SLOPE = 0.001
SUBDIVISION_PRECISION = 0.0000001
SUBDIVISION_MAX_ITERATIONS = 10

kSplineTableSize = 11
kSampleStepSize = 1.0 / (kSplineTableSize - 1.0)


def A(aA1, aA2):
    return 1.0 - 3.0 * aA2 + 3.0 * aA1


def B(aA1, aA2):
    return 3.0 * aA2 - 6.0 * aA1


def C(aA1):
    return 3.0 * aA1


def calc_bezier(aT, aA1, aA2):
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT


def getSlope(aT, aA1, aA2):
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1)


def binary_subdivide(aX, aA, aB, mX1, mX2):
    currentX, currentT, i = 0, 0, 0
    while True:
        currentT = aA + (aB - aA) / 2.0
        currentX = calc_bezier(currentT, mX1, mX2) - aX
        if currentX > 0.0:
            aB = currentT
        else:
            aA = currentT
        i += 1
        if abs(currentX) <= SUBDIVISION_PRECISION or i >= SUBDIVISION_MAX_ITERATIONS:
            break
    return currentT


def newton_raphson_iterate(aX, aGuessT, mX1, mX2):
    for _ in range(NEWTON_ITERATIONS):
        currentSlope = getSlope(aGuessT, mX1, mX2)
        if abs(currentSlope) < SUBDIVISION_PRECISION:
            return aGuessT
        currentX = calc_bezier(aGuessT, mX1, mX2) - aX
        aGuessT -= currentX / currentSlope
    return aGuessT


def LinearEasing(aX):
    return aX


class CubicBezier:
    def __init__(self, aX1, aY1, aX2, aY2):
        self.mX1 = aX1
        self.mY1 = aY1
        self.mX2 = aX2
        self.mY2 = aY2

        self.sampleValues = [0] * kSplineTableSize
        for i in range(kSplineTableSize):
            self.sampleValues[i] = calc_bezier(i * kSampleStepSize, aX1, aX2)

    def get_t_for_x(self, aX):
        intervalStart = 0.0
        currentSample = 1
        lastSample = kSplineTableSize - 1

        while currentSample != lastSample and self.sampleValues[currentSample] <= aX:
            intervalStart += kSampleStepSize
            currentSample += 1
        currentSample -= 1

        dist = (aX - self.sampleValues[currentSample]) / (
            self.sampleValues[currentSample + 1] - self.sampleValues[currentSample]
        )
        guessForT = intervalStart + dist * kSampleStepSize

        initialSlope = getSlope(guessForT, self.mX1, self.mX2)
        if initialSlope >= NEWTON_MIN_SLOPE:
            return newton_raphson_iterate(aX, guessForT, self.mX1, self.mX2)
        elif abs(initialSlope) < SUBDIVISION_PRECISION:
            return guessForT
        else:
            return binary_subdivide(
                aX, intervalStart, intervalStart + kSampleStepSize, self.mX1, self.mX2
            )

    def ease(self, aT):
        if self.mX1 == self.mY1 and self.mX2 == self.mY2:
            return LinearEasing(aT)
        if aT == 0:
            return 0
        if aT == 1:
            return 1
        return calc_bezier(self.get_t_for_x(aT), self.mY1, self.mY2)


############################################################################################################

def init_colors():
    curses.start_color()
    curses.use_default_colors()
    for i in range(0, curses.COLORS):
        curses.init_pair(i + 1, i, -1)

def set_pix(stdscr, x, y, char="â–ˆ", color=8):
    height, width = stdscr.getmaxyx()
    if x >= width:
        return False
    if y >= height:
        return False
    try:
        stdscr.addstr(y, x, char, color)
    except curses.error:
        pass
    return True


class Transition:
    screen: curses.window
    width: int
    height: int
    duration: float
    start_time: float
    loop: bool
    reverse: bool
    debug: bool = False
    bezier: callable
    color: int

    @dataclass
    class Options:
        ...

    def __init__(
        self,
        screen: curses.window,
        duration: float,
        bezier: list[float, float, float, float] = [0.54, 0.02, 0.36, 0.98],
        loop: bool = False,
        reverse: bool = False,
        debug: bool = False,
        color: int = 8,
    ):
        self.screen = screen
        self.duration = duration
        self.start_time = time.time()
        self.height, self.width = screen.getmaxyx()
        self.loop = loop
        self.debug = debug
        self.reverse = reverse
        self.bezier = CubicBezier(*bezier).ease
        self.options = self.Options()
        init_colors()
        self.color = curses.color_pair(color)

    def update_dim(self):
        self.height, self.width = self.screen.getmaxyx()

    def frame_for_instant(self, now: float):
        time = (now - self.start_time) / self.duration
        return self.frame_for_time(time)

    def frame_for_time(self, time: float):
        last_frame = False
        if self.loop:
            if self.reverse:
                time = time % 2
                if time > 1:
                    time = 2 - time
            else:
                time = time % 1
        elif time < 0:
            time = 0
        elif time >= 1:
            time = 1
            last_frame = True
        bezier_time = self.bezier(time)
        self.screen.clear()
        for pix in range(self.height * self.width):
            x = pix % self.width
            y = pix // self.width
            self.draw(x, y, time, bezier_time)
        if self.debug:
            set_pix(self.screen, 0, 0, char=f"time: {time:.4f}")
            set_pix(self.screen, 0, 1, char=f"bezier_time: {bezier_time:.4f}")
            set_pix(
                self.screen, 0, 2, char=f"width: {self.width} height: {self.height}"
            )
        self.screen.refresh()
        return not last_frame

    def draw(self, x, y, time, bezier_time):
        set_pix(self.screen, x, y)
        set_pix(self.screen, 0, 0, char=f"time: {time:.4f}")
        set_pix(self.screen, 0, 1, char=f"bezier_time: {bezier_time:.4f}")
        set_pix(self.screen, 0, 2, char=f"width: {self.width} height: {self.height}")


############################################################################################################
# Transitions
############################################################################################################


class ScanLine(Transition):
    @dataclass
    class Options:
        vertical: bool = True
        _vertical_help = """vertical scanline :0"""
        reverse: bool = False
        _reverse_help = """start from the bottom/right"""
        width: int = 2
        _width_help = """width of the scanline"""
        scale_width: float = 1.1
        _scale_width_help = """width is increased by this amount as 'scale_ratio' is reached"""
        scale_ratio: float = 0.5
        _scale_ratio_help = """ratio where the width of scanline is maximum"""

    def draw(self, x, y, time, bezier_time):
        width = self.width
        height = self.height

        vertical = self.options.vertical
        reverse = self.options.reverse
        thickness = self.options.width

        scale_width = self.options.scale_width - 1
        scale_ratio = self.options.scale_ratio

        path = [height, width][vertical]
        pix_pos = [y, x][vertical]

        if bezier_time <= scale_ratio:
            thickness = thickness + scale_width * path * bezier_time / scale_ratio
        else:
            thickness = thickness + scale_width * path * (
                (1 - bezier_time) / (1 - scale_ratio)
            )

        if reverse:
            bezier_time = 1 - bezier_time

        if not vertical:
            thickness /= 2

        if abs(pix_pos + thickness - (path + thickness * 2) * bezier_time) < thickness:
            set_pix(self.screen, x, y, color=self.color)


class Grow(Transition):
    center_x: int
    center_y: int

    @dataclass
    class Options:
        center: tuple[float, float] = (0.5, 0.5)
        _center_help = """center of the circle as a ratio between 0 and 1"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.center_x = self.width * self.options.center[0]
        self.center_y = self.height * self.options.center[1]

    def update_dim(self):
        super().update_dim()
        self.center_x = self.width * self.options.center[0]
        self.center_y = self.height * self.options.center[1]

    def draw(self, x, y, time, bezier_time):
        dist_x = abs(x - self.center_x) / 2
        dist_y = abs(y - self.center_y)
        dist = (dist_x**2 + dist_y**2) ** 0.5

        max_dist = (
            ((max(self.center_x, self.width - self.center_x)) / 2) ** 2
            + (max(self.center_y, self.height - self.center_y)) ** 2
        ) ** 0.5

        if dist > bezier_time * max_dist:
            set_pix(self.screen, x, y, color=self.color)


class Shrink(Transition):
    center_x: int
    center_y: int

    @dataclass
    class Options:
        center: tuple[float, float] = (0.5, 0.5)
        _center_help = """center of the circle as a ratio between 0 and 1"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.center_x = self.width * self.options.center[0]
        self.center_y = self.height * self.options.center[1]

    def update_dim(self):
        super().update_dim()
        self.center_x = self.width * self.options.center[0]
        self.center_y = self.height * self.options.center[1]

    def draw(self, x, y, time, bezier_time):
        dist_x = abs(x - self.center_x) / 2
        dist_y = abs(y - self.center_y)
        dist = (dist_x**2 + dist_y**2) ** 0.5

        max_dist = (
            ((max(self.center_x, self.width - self.center_x)) / 2) ** 2
            + (max(self.center_y, self.height - self.center_y)) ** 2
        ) ** 0.5

        if dist < (1 - bezier_time) * max_dist:
            set_pix(self.screen, x, y, color=self.color)


class GrowExit(Transition):
    center_x: int
    center_y: int

    center_x2: int
    center_y2: int

    @dataclass
    class Options:
        center: tuple[float, float] = (0.5, 0.5)
        _center_help = """center of the first circle"""
        center2: tuple[float, float] = (-1, -1)
        _center2_help = """center of the second circle, if negative, defaults to same coord as first circle"""
        second_start: float = 0.5
        _second_start_help = """when the second circle starts to grow and the first circle ends as a ratio between 0 and 1"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.center_x = self.width * self.options.center[0]
        self.center_y = self.height * self.options.center[1]
        self.center_x2 = (
            self.center_x
            if self.options.center2[0] < 0
            else self.width * self.options.center2[0]
        )
        self.center_y2 = (
            self.center_y
            if self.options.center2[1] < 0
            else self.height * self.options.center2[1]
        )

    def update_dim(self):
        super().update_dim()
        self.center_x = self.width * self.options.center[0]
        self.center_y = self.height * self.options.center[1]
        self.center_x2 = (
            self.center_x
            if self.options.center2[0] < 0
            else self.width * self.options.center2[0]
        )
        self.center_y2 = (
            self.center_y
            if self.options.center2[1] < 0
            else self.height * self.options.center2[1]
        )

    def draw(self, x, y, time, bezier_time):
        second_start = self.options.second_start
        center_x = self.center_x
        center_y = self.center_y
        center_x2 = self.center_x2
        center_y2 = self.center_y2
        width = self.width
        height = self.height

        if bezier_time < second_start:
            dist_x = abs(x - center_x) / 2
            dist_y = abs(y - center_y)
            dist = (dist_x**2 + dist_y**2) ** 0.5

            max_dist = (
                ((max(center_x, width - center_x)) / 2) ** 2
                + (max(center_y, height - center_y)) ** 2
            ) ** 0.5
            if dist < bezier_time / second_start * max_dist:
                set_pix(self.screen, x, y, color=self.color)
        else:
            dist_x = abs(x - center_x2) / 2
            dist_y = abs(y - center_y2)
            dist = (dist_x**2 + dist_y**2) ** 0.5

            max_dist = (
                ((max(center_x2, width - center_x2)) / 2) ** 2
                + (max(center_y2, height - center_y2)) ** 2
            ) ** 0.5
            if dist > (bezier_time - second_start) / (1 - second_start) * max_dist:
                set_pix(self.screen, x, y, color=self.color)


class ShrinkExit(Transition):
    center_x: int
    center_y: int

    center_x2: int
    center_y2: int

    @dataclass
    class Options:
        center: tuple[float, float] = (0.5, 0.5)
        _center_help = """center of the first circle"""
        center2: tuple[float, float] = (-1, -1)
        _center2_help = """center of the second circle, if negative, defaults to same coord as first circle"""
        second_start: float = 0.5
        _second_start_help = """when the second circle starts to grow and the first circle ends as a ratio between 0 and 1"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.center_x = self.width * self.options.center[0]
        self.center_y = self.height * self.options.center[1]
        self.center_x2 = (
            self.center_x
            if self.options.center2[0] < 0
            else self.width * self.options.center2[0]
        )
        self.center_y2 = (
            self.center_y
            if self.options.center2[1] < 0
            else self.height * self.options.center2[1]
        )

    def update_dim(self):
        super().update_dim()
        self.center_x = self.width * self.options.center[0]
        self.center_y = self.height * self.options.center[1]
        self.center_x2 = (
            self.center_x
            if self.options.center2[0] < 0
            else self.width * self.options.center2[0]
        )
        self.center_y2 = (
            self.center_y
            if self.options.center2[1] < 0
            else self.height * self.options.center2[1]
        )

    def draw(self, x, y, time, bezier_time):
        second_start = self.options.second_start
        center_x = self.center_x
        center_y = self.center_y
        center_x2 = self.center_x2
        center_y2 = self.center_y2
        width = self.width
        height = self.height

        if bezier_time < second_start:
            dist_x = abs(x - center_x) / 2
            dist_y = abs(y - center_y)
            dist = (dist_x**2 + dist_y**2) ** 0.5

            max_dist = (
                ((max(center_x, width - center_x)) / 2) ** 2
                + (max(center_y, height - center_y)) ** 2
            ) ** 0.5
            if dist > (1 - bezier_time * (1 / second_start)) * max_dist:
                set_pix(self.screen, x, y, color=self.color)
        else:
            dist_x = abs(x - center_x2) / 2
            dist_y = abs(y - center_y2)
            dist = (dist_x**2 + dist_y**2) ** 0.5

            max_dist = (
                ((max(center_x2, width - center_x2)) / 2) ** 2
                + (max(center_y2, height - center_y2)) ** 2
            ) ** 0.5
            if (
                dist
                < (1 - (bezier_time - second_start) / (1 - second_start)) * max_dist
            ):
                set_pix(self.screen, x, y, color=self.color)


############################################################################################################

def _main(stdscr,args):
    curses.curs_set(0)
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_BLACK, -1)
    make_frame = True

    match args.transition:
        case "scanline":
            transition = ScanLine(stdscr, args.duration, loop=args.loop, reverse=args.reverse, debug=args.debug, color=args.color)
            transition_name = "scanline"
        case "grow":
            transition = Grow(stdscr, args.duration, loop=args.loop, reverse=args.reverse, debug=args.debug, color=args.color)
            transition_name = "grow"
        case "shrink":
            transition = Shrink(stdscr, args.duration, loop=args.loop, reverse=args.reverse, debug=args.debug, color=args.color)
            transition_name = "shrink"
        case "growexit":
            transition = GrowExit(stdscr, args.duration, loop=args.loop, reverse=args.reverse, debug=args.debug, color=args.color)
            transition_name = "growexit"
        case "shrinkexit":
            transition = ShrinkExit(stdscr, args.duration, loop=args.loop, reverse=args.reverse, debug=args.debug, color=args.color)
            transition_name = "shrinkexit"
        case _:
            transition = Transition(stdscr, args.duration, loop=args.loop, reverse=args.reverse, debug=args.debug, color=args.color)
            transition_name = "transition"

    transition.options = transition.Options()
    
    for field in transition.Options.__dataclass_fields__.keys():
        if getattr(args,f"{transition_name}_{field}"):
            setattr(transition.options,field,getattr(args,f"{transition_name}_{field}"))

    try:
        while make_frame:
            current_width, current_height = stdscr.getmaxyx()
            if transition.width != current_width or transition.height != current_height:
                transition.update_dim()
            if not transition.frame_for_instant(time.time()):
                break
    except KeyboardInterrupt:
        pass


def main():
    
    parser = argparse.ArgumentParser(
                    prog='STTT',
                    description='a solution to your terminal transition tribulation'
            )
    
    transitions = [ScanLine, Grow, Shrink, GrowExit, ShrinkExit]
    transition_names = [t.__name__.lower() for t in transitions]

    parser.add_argument(
        'transition',
        type=str,
        choices=transition_names,
        help='transition to use',
    )

    parser.add_argument(
        '-c',
        '--color',
        type=int,
        choices=range(0, 13),
        default=8,
        help='terminal color code of the color to use',
    )

    parser.add_argument(
        '-d',
        '--duration',
        type=float,
        default=1,
        help='duration of transition',
    )

    parser.add_argument(
        '-b',
        '--bezier',
        type=float,
        nargs=4,
        default=[0.54, 0.02, 0.36, 0.98],
        help='bezier curve for transition',
    )

    parser.add_argument(
        '-l',
        '--loop',
        action='store_true',
        help='loop transition',
    )

    parser.add_argument(
        '-r',
        '--reverse',
        action='store_true',
        help='reverse transition',
    )

    parser.add_argument(
        '--debug',
        action='store_true',
        help='show debug info',
    )

    def to_tuple(s,t=float):
        return tuple(map(t,s.split(",")))

    for transition in transitions:
        for field in transition.Options.__dataclass_fields__.keys():
            if isinstance(getattr(transition.Options, field),tuple):
                parser.add_argument(
                    f'--{transition.__name__.lower().replace("_","-")}-{field.replace("_","-")}',
                    type=to_tuple,
                    help=(getattr(transition.Options, f"_{field}_help")),
                )
            else: 
                parser.add_argument(
                    f'--{transition.__name__.lower().replace("_","-")}-{field.replace("_","-")}',
                    type=type(getattr(transition.Options, field)),
                    help=(getattr(transition.Options, f"_{field}_help")),
                )



    args = parser.parse_args()

    wrapper(_main,args)

if __name__ == "__main__":
    main()
